Hashmap是一个Node<k,v>[]数组，而每一个K,V都存放在Node<k,v>链表中

map.get():
通过计算key的hashcode，这个数据就是数组的索引，然后再从数组直接取对应的数，时间复杂度为O(1)。
由于不同的key值的hashcode可能一样，所以就会出现hash collisions，
这时候就要空间换时间，升维，将多出来的数据存放在链表中。

map.put():
时间复杂度也是O（1），
在put()之前会先计算hashcode找到相应的位置存放值，如果位置是空的，则存放；
如果不为空，则说明你这次给的key在map中已经有了一个V，要判断一个参数onlyIfAbsent，
这个参数是决定要不要新值替换旧值，如果替换，则返回旧值记录，
在hashmap中还有resize()，就是将空间重置大小